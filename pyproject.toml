[tool.poetry]
name = "mesh-sandbox"
version = "0.0.0"
description = "NHSDigital mesh sandbox, a locally testable version of the MESH api"
authors = ["spinecore"]
license = "MIT"
packages = [
    { include = "mesh_sandbox", from = "src" },
]
readme = "README.md"

[tool.poetry.dependencies]
# core dependencies
python = "^3.9"
types-python-dateutil = "^2.8.9"
python-dateutil = "^2.8.2"
cryptography = "^41.0.4"
fastapi = ">=0.103.1,<0.105.0"
gunicorn = "^21.2.0"
uvicorn = "^0.23.2"



[tool.poetry.group.dev.dependencies]
# ci / testing dependencies
petname = "^2.6"
pytest = "^7.2.0"
pytest-asyncio = ">=0.16,<0.22"
Mesh-Client = "^2.0.1"
mypy = "^1.1.1"
coverage = ">=6.5,<8.0"
httpx = ">=0.23,<0.25"
types-requests = "^2.28.11.4"
pyOpenSSL = "^23.0.0"
types-pyOpenSSL = "^23.0.0.2"
lxml = "^4.9.1"
types-lxml = ">=2022.11.8,<2024.0.0"
ruff = "^0.0.291"
black = "^23.9.1"


[tool.poetry.group.local.dependencies]
ipython = "^8.11.0"

[tool.black]
line-length = 120
target-version = ['py39', 'py310']
include = '\.pyi?$'
#extend-exclude = '''
#/(
#  # The following are specific to Black, you probably don't want those.
#  | blib2to3
#  | tests/data
#  | profiling
#)/
#'''

[tool.coverage.run]
branch = true
omit = [
    ".venv/*",
]
source = [
    "."
]


[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    "pragma: no cover",
    "from .*",
    "import .*"
]
omit = [
    "*/conftest.py",
    "src/mesh_sandbox/store/base.py",
    "scripts/*.py"
]
sort = "-cover"
ignore_errors = true
precision = 2
fail_under = 85
show_missing = true

[tool.coverage.xml]
output = "reports/coverage.xml"


[tool.pytest.ini_options]
asyncio_mode = "auto"
python_classes = "NoToTestClasses"
python_files = "src/mesh_sandbox/tests/*.py"
norecursedirs = ".git .venv .eggs build dist features"


[tool.pylint.main]
ignore-paths = [
    '.venv/.*',
    '.*/?\.git/.*',
    'resources/.*',
    'reports/.*',
    '.*/?(build|dist|ansible)/.*',
]
py-version = "3.9"
recursive = true
extension-pkg-whitelist="lxml"

[tool.ruff]
select = [
    # See https://beta.ruff.rs/docs/rules/ for a full list
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "Q", # flake8-quotes
    "YTT", # flake8-2020
    "RSE", # flake8-raise
    "T10", # flake8-debugger
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "EXE", # flake8-executable
    "A", # flake8-builtins
    "UP",  # pyupgrade
    "PT", # flake8-pytest-style
    "PERF", # Perflint #
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
]
src = ["."]
ignore = [
    "PT004",
    "UP007"
]
exclude = [
    ".git",
    ".venv",
]
unfixable = ["SIM112"]
line-length = 120
target-version = "py39"

[tool.ruff.per-file-ignores]
"src/mesh_sandbox/routers/*" = ["B008"]
"src/mesh_sandbox/handlers/*" = ["B008"]
"src/mesh_sandbox/dependencies.py" = ["B008"]
"src/mesh_sandbox/views/*" = ["RUF012"]


[tool.ruff.isort]
known-third-party = ["fastapi", "pydantic", "starlette"]

[tool.ruff.mccabe]
max-complexity = 15


[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
show_error_codes = true
check_untyped_defs = true

[[tool.mypy.overrides]]
module = "behave.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "mesh_client.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "parse"
ignore_missing_imports = true

[tool.isort]
profile = "black"
known_third_party = ["fastapi", "pydantic", "starlette"]

[tool.poetry-dynamic-versioning]
enable = true
metadata = false
vcs = "git"
style = "pep440"
format-jinja = """
    {%- if distance == 0 -%}
        {{ serialize_pep440(base, stage, revision) }}
    {%- else -%}
        {{ serialize_pep440(bump_version(base), stage, revision, dev=timestamp) }}
    {%- endif -%}
"""

[tool.poetry-dynamic-versioning.substitution]
folders = [
    { path = "src" }
]

[build-system]
requires = ["poetry>=1.2", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"
